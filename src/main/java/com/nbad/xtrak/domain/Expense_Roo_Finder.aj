// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbad.xtrak.domain;

import com.nbad.xtrak.domain.Expense;
import com.nbad.xtrak.domain.Login;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Expense_Roo_Finder {
    
    public static Long Expense.countFindExpensesByPaidBy(Login paidBy) {
        if (paidBy == null) throw new IllegalArgumentException("The paidBy argument is required");
        EntityManager em = Expense.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Expense AS o WHERE o.paidBy = :paidBy", Long.class);
        q.setParameter("paidBy", paidBy);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Expense> Expense.findExpensesByPaidBy(Login paidBy) {
        if (paidBy == null) throw new IllegalArgumentException("The paidBy argument is required");
        EntityManager em = Expense.entityManager();
        TypedQuery<Expense> q = em.createQuery("SELECT o FROM Expense AS o WHERE o.paidBy = :paidBy", Expense.class);
        q.setParameter("paidBy", paidBy);
        return q;
    }
    
    public static TypedQuery<Expense> Expense.findExpensesByPaidBy(Login paidBy, String sortFieldName, String sortOrder) {
        if (paidBy == null) throw new IllegalArgumentException("The paidBy argument is required");
        EntityManager em = Expense.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Expense AS o WHERE o.paidBy = :paidBy");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Expense> q = em.createQuery(queryBuilder.toString(), Expense.class);
        q.setParameter("paidBy", paidBy);
        return q;
    }
    
}
