// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbad.xtrak.web;

import com.nbad.xtrak.domain.Login;
import com.nbad.xtrak.domain.Payments;
import com.nbad.xtrak.web.PaymentsBean;
import com.nbad.xtrak.web.converter.LoginConverter;
import com.nbad.xtrak.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect PaymentsBean_Roo_ManagedBean {
    
    declare @type: PaymentsBean: @ManagedBean(name = "paymentsBean");
    
    declare @type: PaymentsBean: @SessionScoped;
    
    private String PaymentsBean.name = "Paymentses";
    
    private Payments PaymentsBean.payments;
    
    private List<Payments> PaymentsBean.allPaymentses;
    
    private boolean PaymentsBean.dataVisible = false;
    
    private List<String> PaymentsBean.columns;
    
    private HtmlPanelGrid PaymentsBean.createPanelGrid;
    
    private HtmlPanelGrid PaymentsBean.editPanelGrid;
    
    private HtmlPanelGrid PaymentsBean.viewPanelGrid;
    
    private boolean PaymentsBean.createDialogVisible = false;
    
    @PostConstruct
    public void PaymentsBean.init() {
        columns = new ArrayList<String>();
        columns.add("paidDate");
        columns.add("amount");
    }
    
    public String PaymentsBean.getName() {
        return name;
    }
    
    public List<String> PaymentsBean.getColumns() {
        return columns;
    }
    
    public List<Payments> PaymentsBean.getAllPaymentses() {
        return allPaymentses;
    }
    
    public void PaymentsBean.setAllPaymentses(List<Payments> allPaymentses) {
        this.allPaymentses = allPaymentses;
    }
    
    public String PaymentsBean.findAllPaymentses() {
        allPaymentses = Payments.findAllPaymentses();
        dataVisible = !allPaymentses.isEmpty();
        return null;
    }
    
    public boolean PaymentsBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PaymentsBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PaymentsBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PaymentsBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PaymentsBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PaymentsBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PaymentsBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PaymentsBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PaymentsBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel paidByCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paidByCreateOutput.setFor("paidByCreateInput");
        paidByCreateOutput.setId("paidByCreateOutput");
        paidByCreateOutput.setValue("Paid By:");
        htmlPanelGrid.getChildren().add(paidByCreateOutput);
        
        AutoComplete paidByCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        paidByCreateInput.setId("paidByCreateInput");
        paidByCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidBy}", Login.class));
        paidByCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{paymentsBean.completePaidBy}", List.class, new Class[] { String.class }));
        paidByCreateInput.setDropdown(true);
        paidByCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "paidBy", String.class));
        paidByCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{paidBy.username} #{paidBy.password} #{paidBy.lastLogin} #{paidBy.role}", String.class));
        paidByCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{paidBy}", Login.class));
        paidByCreateInput.setConverter(new LoginConverter());
        paidByCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(paidByCreateInput);
        
        Message paidByCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paidByCreateInputMessage.setId("paidByCreateInputMessage");
        paidByCreateInputMessage.setFor("paidByCreateInput");
        paidByCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paidByCreateInputMessage);
        
        OutputLabel paidToCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paidToCreateOutput.setFor("paidToCreateInput");
        paidToCreateOutput.setId("paidToCreateOutput");
        paidToCreateOutput.setValue("Paid To:");
        htmlPanelGrid.getChildren().add(paidToCreateOutput);
        
        AutoComplete paidToCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        paidToCreateInput.setId("paidToCreateInput");
        paidToCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidTo}", Login.class));
        paidToCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{paymentsBean.completePaidTo}", List.class, new Class[] { String.class }));
        paidToCreateInput.setDropdown(true);
        paidToCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "paidTo", String.class));
        paidToCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{paidTo.username} #{paidTo.password} #{paidTo.lastLogin} #{paidTo.role}", String.class));
        paidToCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{paidTo}", Login.class));
        paidToCreateInput.setConverter(new LoginConverter());
        paidToCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(paidToCreateInput);
        
        Message paidToCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paidToCreateInputMessage.setId("paidToCreateInputMessage");
        paidToCreateInputMessage.setFor("paidToCreateInput");
        paidToCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paidToCreateInputMessage);
        
        OutputLabel paidDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paidDateCreateOutput.setFor("paidDateCreateInput");
        paidDateCreateOutput.setId("paidDateCreateOutput");
        paidDateCreateOutput.setValue("Paid Date:");
        htmlPanelGrid.getChildren().add(paidDateCreateOutput);
        
        Calendar paidDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        paidDateCreateInput.setId("paidDateCreateInput");
        paidDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidDate}", Date.class));
        paidDateCreateInput.setNavigator(true);
        paidDateCreateInput.setEffect("slideDown");
        paidDateCreateInput.setPattern("dd/MM/yyyy");
        paidDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(paidDateCreateInput);
        
        Message paidDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paidDateCreateInputMessage.setId("paidDateCreateInputMessage");
        paidDateCreateInputMessage.setFor("paidDateCreateInput");
        paidDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paidDateCreateInputMessage);
        
        OutputLabel amountCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amountCreateOutput.setFor("amountCreateInput");
        amountCreateOutput.setId("amountCreateOutput");
        amountCreateOutput.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountCreateOutput);
        
        InputText amountCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amountCreateInput.setId("amountCreateInput");
        amountCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.amount}", Double.class));
        amountCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(amountCreateInput);
        
        Message amountCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amountCreateInputMessage.setId("amountCreateInputMessage");
        amountCreateInputMessage.setFor("amountCreateInput");
        amountCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amountCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PaymentsBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel paidByEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paidByEditOutput.setFor("paidByEditInput");
        paidByEditOutput.setId("paidByEditOutput");
        paidByEditOutput.setValue("Paid By:");
        htmlPanelGrid.getChildren().add(paidByEditOutput);
        
        AutoComplete paidByEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        paidByEditInput.setId("paidByEditInput");
        paidByEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidBy}", Login.class));
        paidByEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{paymentsBean.completePaidBy}", List.class, new Class[] { String.class }));
        paidByEditInput.setDropdown(true);
        paidByEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "paidBy", String.class));
        paidByEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{paidBy.username} #{paidBy.password} #{paidBy.lastLogin} #{paidBy.role}", String.class));
        paidByEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{paidBy}", Login.class));
        paidByEditInput.setConverter(new LoginConverter());
        paidByEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(paidByEditInput);
        
        Message paidByEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paidByEditInputMessage.setId("paidByEditInputMessage");
        paidByEditInputMessage.setFor("paidByEditInput");
        paidByEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paidByEditInputMessage);
        
        OutputLabel paidToEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paidToEditOutput.setFor("paidToEditInput");
        paidToEditOutput.setId("paidToEditOutput");
        paidToEditOutput.setValue("Paid To:");
        htmlPanelGrid.getChildren().add(paidToEditOutput);
        
        AutoComplete paidToEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        paidToEditInput.setId("paidToEditInput");
        paidToEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidTo}", Login.class));
        paidToEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{paymentsBean.completePaidTo}", List.class, new Class[] { String.class }));
        paidToEditInput.setDropdown(true);
        paidToEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "paidTo", String.class));
        paidToEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{paidTo.username} #{paidTo.password} #{paidTo.lastLogin} #{paidTo.role}", String.class));
        paidToEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{paidTo}", Login.class));
        paidToEditInput.setConverter(new LoginConverter());
        paidToEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(paidToEditInput);
        
        Message paidToEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paidToEditInputMessage.setId("paidToEditInputMessage");
        paidToEditInputMessage.setFor("paidToEditInput");
        paidToEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paidToEditInputMessage);
        
        OutputLabel paidDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paidDateEditOutput.setFor("paidDateEditInput");
        paidDateEditOutput.setId("paidDateEditOutput");
        paidDateEditOutput.setValue("Paid Date:");
        htmlPanelGrid.getChildren().add(paidDateEditOutput);
        
        Calendar paidDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        paidDateEditInput.setId("paidDateEditInput");
        paidDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidDate}", Date.class));
        paidDateEditInput.setNavigator(true);
        paidDateEditInput.setEffect("slideDown");
        paidDateEditInput.setPattern("dd/MM/yyyy");
        paidDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(paidDateEditInput);
        
        Message paidDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paidDateEditInputMessage.setId("paidDateEditInputMessage");
        paidDateEditInputMessage.setFor("paidDateEditInput");
        paidDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paidDateEditInputMessage);
        
        OutputLabel amountEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        amountEditOutput.setFor("amountEditInput");
        amountEditOutput.setId("amountEditOutput");
        amountEditOutput.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountEditOutput);
        
        InputText amountEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        amountEditInput.setId("amountEditInput");
        amountEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.amount}", Double.class));
        amountEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(amountEditInput);
        
        Message amountEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        amountEditInputMessage.setId("amountEditInputMessage");
        amountEditInputMessage.setFor("amountEditInput");
        amountEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(amountEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PaymentsBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText paidByLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paidByLabel.setId("paidByLabel");
        paidByLabel.setValue("Paid By:");
        htmlPanelGrid.getChildren().add(paidByLabel);
        
        HtmlOutputText paidByValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paidByValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidBy}", Login.class));
        paidByValue.setConverter(new LoginConverter());
        htmlPanelGrid.getChildren().add(paidByValue);
        
        HtmlOutputText paidToLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paidToLabel.setId("paidToLabel");
        paidToLabel.setValue("Paid To:");
        htmlPanelGrid.getChildren().add(paidToLabel);
        
        HtmlOutputText paidToValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paidToValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidTo}", Login.class));
        paidToValue.setConverter(new LoginConverter());
        htmlPanelGrid.getChildren().add(paidToValue);
        
        HtmlOutputText paidDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paidDateLabel.setId("paidDateLabel");
        paidDateLabel.setValue("Paid Date:");
        htmlPanelGrid.getChildren().add(paidDateLabel);
        
        HtmlOutputText paidDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paidDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.paidDate}", Date.class));
        DateTimeConverter paidDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        paidDateValueConverter.setPattern("dd/MM/yyyy");
        paidDateValue.setConverter(paidDateValueConverter);
        htmlPanelGrid.getChildren().add(paidDateValue);
        
        HtmlOutputText amountLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amountLabel.setId("amountLabel");
        amountLabel.setValue("Amount:");
        htmlPanelGrid.getChildren().add(amountLabel);
        
        HtmlOutputText amountValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        amountValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{paymentsBean.payments.amount}", String.class));
        htmlPanelGrid.getChildren().add(amountValue);
        
        return htmlPanelGrid;
    }
    
    public Payments PaymentsBean.getPayments() {
        if (payments == null) {
            payments = new Payments();
        }
        return payments;
    }
    
    public void PaymentsBean.setPayments(Payments payments) {
        this.payments = payments;
    }
    
    public List<Login> PaymentsBean.completePaidBy(String query) {
        List<Login> suggestions = new ArrayList<Login>();
        for (Login login : Login.findAllLogins()) {
            String loginStr = String.valueOf(login.getUsername() +  " "  + login.getPassword() +  " "  + login.getLastLogin() +  " "  + login.getRole());
            if (loginStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(login);
            }
        }
        return suggestions;
    }
    
    public List<Login> PaymentsBean.completePaidTo(String query) {
        List<Login> suggestions = new ArrayList<Login>();
        for (Login login : Login.findAllLogins()) {
            String loginStr = String.valueOf(login.getUsername() +  " "  + login.getPassword() +  " "  + login.getLastLogin() +  " "  + login.getRole());
            if (loginStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(login);
            }
        }
        return suggestions;
    }
    
    public String PaymentsBean.onEdit() {
        return null;
    }
    
    public boolean PaymentsBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PaymentsBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PaymentsBean.displayList() {
        createDialogVisible = false;
        findAllPaymentses();
        return "payments";
    }
    
    public String PaymentsBean.displayCreateDialog() {
        payments = new Payments();
        createDialogVisible = true;
        return "payments";
    }
    
    public String PaymentsBean.persist() {
        String message = "";
        if (payments.getId() != null) {
            payments.merge();
            message = "message_successfully_updated";
        } else {
            payments.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Payments");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPaymentses();
    }
    
    public String PaymentsBean.delete() {
        payments.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Payments");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPaymentses();
    }
    
    public void PaymentsBean.reset() {
        payments = null;
        createDialogVisible = false;
    }
    
    public void PaymentsBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
