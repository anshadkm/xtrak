// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nbad.xtrak.web;

import com.nbad.xtrak.domain.Expense;
import com.nbad.xtrak.domain.ExpenseDetails;
import com.nbad.xtrak.domain.Login;
import com.nbad.xtrak.web.ExpenseDetailsBean;
import com.nbad.xtrak.web.converter.ExpenseConverter;
import com.nbad.xtrak.web.converter.LoginConverter;
import com.nbad.xtrak.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ExpenseDetailsBean_Roo_ManagedBean {
    
    declare @type: ExpenseDetailsBean: @ManagedBean(name = "expenseDetailsBean");
    
    declare @type: ExpenseDetailsBean: @SessionScoped;
    
    private String ExpenseDetailsBean.name = "ExpenseDetailses";
    
    private ExpenseDetails ExpenseDetailsBean.expenseDetails;
    
    private List<ExpenseDetails> ExpenseDetailsBean.allExpenseDetailses;
    
    private boolean ExpenseDetailsBean.dataVisible = false;
    
    private List<String> ExpenseDetailsBean.columns;
    
    private HtmlPanelGrid ExpenseDetailsBean.createPanelGrid;
    
    private HtmlPanelGrid ExpenseDetailsBean.editPanelGrid;
    
    private HtmlPanelGrid ExpenseDetailsBean.viewPanelGrid;
    
    private boolean ExpenseDetailsBean.createDialogVisible = false;
    
    @PostConstruct
    public void ExpenseDetailsBean.init() {
        columns = new ArrayList<String>();
        columns.add("cost");
    }
    
    public String ExpenseDetailsBean.getName() {
        return name;
    }
    
    public List<String> ExpenseDetailsBean.getColumns() {
        return columns;
    }
    
    public List<ExpenseDetails> ExpenseDetailsBean.getAllExpenseDetailses() {
        return allExpenseDetailses;
    }
    
    public void ExpenseDetailsBean.setAllExpenseDetailses(List<ExpenseDetails> allExpenseDetailses) {
        this.allExpenseDetailses = allExpenseDetailses;
    }
    
    public String ExpenseDetailsBean.findAllExpenseDetailses() {
        allExpenseDetailses = ExpenseDetails.findAllExpenseDetailses();
        dataVisible = !allExpenseDetailses.isEmpty();
        return null;
    }
    
    public boolean ExpenseDetailsBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ExpenseDetailsBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ExpenseDetailsBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ExpenseDetailsBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ExpenseDetailsBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ExpenseDetailsBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ExpenseDetailsBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ExpenseDetailsBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ExpenseDetailsBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel expenseCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        expenseCreateOutput.setFor("expenseCreateInput");
        expenseCreateOutput.setId("expenseCreateOutput");
        expenseCreateOutput.setValue("Expense:");
        htmlPanelGrid.getChildren().add(expenseCreateOutput);
        
        AutoComplete expenseCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        expenseCreateInput.setId("expenseCreateInput");
        expenseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.expense}", Expense.class));
        expenseCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{expenseDetailsBean.completeExpense}", List.class, new Class[] { String.class }));
        expenseCreateInput.setDropdown(true);
        expenseCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "expense", String.class));
        expenseCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{expense.xpdate} #{expense.itemcode} #{expense.remarks} #{expense.totalCost}", String.class));
        expenseCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{expense}", Expense.class));
        expenseCreateInput.setConverter(new ExpenseConverter());
        expenseCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(expenseCreateInput);
        
        Message expenseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        expenseCreateInputMessage.setId("expenseCreateInputMessage");
        expenseCreateInputMessage.setFor("expenseCreateInput");
        expenseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(expenseCreateInputMessage);
        
        OutputLabel paidForCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paidForCreateOutput.setFor("paidForCreateInput");
        paidForCreateOutput.setId("paidForCreateOutput");
        paidForCreateOutput.setValue("Paid For:");
        htmlPanelGrid.getChildren().add(paidForCreateOutput);
        
        AutoComplete paidForCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        paidForCreateInput.setId("paidForCreateInput");
        paidForCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.paidFor}", Login.class));
        paidForCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{expenseDetailsBean.completePaidFor}", List.class, new Class[] { String.class }));
        paidForCreateInput.setDropdown(true);
        paidForCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "paidFor", String.class));
        paidForCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{paidFor.username}", String.class));
        paidForCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{paidFor}", Login.class));
        paidForCreateInput.setConverter(new LoginConverter());
        paidForCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(paidForCreateInput);
        
        Message paidForCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paidForCreateInputMessage.setId("paidForCreateInputMessage");
        paidForCreateInputMessage.setFor("paidForCreateInput");
        paidForCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paidForCreateInputMessage);
        
        OutputLabel costCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        costCreateOutput.setFor("costCreateInput");
        costCreateOutput.setId("costCreateOutput");
        costCreateOutput.setValue("Cost:");
        htmlPanelGrid.getChildren().add(costCreateOutput);
        
        InputText costCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        costCreateInput.setId("costCreateInput");
        costCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.cost}", Double.class));
        costCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(costCreateInput);
        
        Message costCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        costCreateInputMessage.setId("costCreateInputMessage");
        costCreateInputMessage.setFor("costCreateInput");
        costCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(costCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ExpenseDetailsBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel expenseEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        expenseEditOutput.setFor("expenseEditInput");
        expenseEditOutput.setId("expenseEditOutput");
        expenseEditOutput.setValue("Expense:");
        htmlPanelGrid.getChildren().add(expenseEditOutput);
        
        AutoComplete expenseEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        expenseEditInput.setId("expenseEditInput");
        expenseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.expense}", Expense.class));
        expenseEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{expenseDetailsBean.completeExpense}", List.class, new Class[] { String.class }));
        expenseEditInput.setDropdown(true);
        expenseEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "expense", String.class));
        expenseEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{expense.xpdate} #{expense.itemcode} #{expense.remarks} #{expense.totalCost}", String.class));
        expenseEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{expense}", Expense.class));
        expenseEditInput.setConverter(new ExpenseConverter());
        expenseEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(expenseEditInput);
        
        Message expenseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        expenseEditInputMessage.setId("expenseEditInputMessage");
        expenseEditInputMessage.setFor("expenseEditInput");
        expenseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(expenseEditInputMessage);
        
        OutputLabel paidForEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        paidForEditOutput.setFor("paidForEditInput");
        paidForEditOutput.setId("paidForEditOutput");
        paidForEditOutput.setValue("Paid For:");
        htmlPanelGrid.getChildren().add(paidForEditOutput);
        
        AutoComplete paidForEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        paidForEditInput.setId("paidForEditInput");
        paidForEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.paidFor}", Login.class));
        paidForEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{expenseDetailsBean.completePaidFor}", List.class, new Class[] { String.class }));
        paidForEditInput.setDropdown(true);
        paidForEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "paidFor", String.class));
        paidForEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{paidFor.username} #{paidFor.password} #{paidFor.lastLogin}", String.class));
        paidForEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{paidFor}", Login.class));
        paidForEditInput.setConverter(new LoginConverter());
        paidForEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(paidForEditInput);
        
        Message paidForEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        paidForEditInputMessage.setId("paidForEditInputMessage");
        paidForEditInputMessage.setFor("paidForEditInput");
        paidForEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(paidForEditInputMessage);
        
        OutputLabel costEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        costEditOutput.setFor("costEditInput");
        costEditOutput.setId("costEditOutput");
        costEditOutput.setValue("Cost:");
        htmlPanelGrid.getChildren().add(costEditOutput);
        
        InputText costEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        costEditInput.setId("costEditInput");
        costEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.cost}", Double.class));
        costEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(costEditInput);
        
        Message costEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        costEditInputMessage.setId("costEditInputMessage");
        costEditInputMessage.setFor("costEditInput");
        costEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(costEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ExpenseDetailsBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText expenseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        expenseLabel.setId("expenseLabel");
        expenseLabel.setValue("Expense:");
        htmlPanelGrid.getChildren().add(expenseLabel);
        
        HtmlOutputText expenseValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        expenseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.expense}", Expense.class));
        expenseValue.setConverter(new ExpenseConverter());
        htmlPanelGrid.getChildren().add(expenseValue);
        
        HtmlOutputText paidForLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paidForLabel.setId("paidForLabel");
        paidForLabel.setValue("Paid For:");
        htmlPanelGrid.getChildren().add(paidForLabel);
        
        HtmlOutputText paidForValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        paidForValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.paidFor}", Login.class));
        paidForValue.setConverter(new LoginConverter());
        htmlPanelGrid.getChildren().add(paidForValue);
        
        HtmlOutputText costLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        costLabel.setId("costLabel");
        costLabel.setValue("Cost:");
        htmlPanelGrid.getChildren().add(costLabel);
        
        HtmlOutputText costValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        costValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{expenseDetailsBean.expenseDetails.cost}", String.class));
        htmlPanelGrid.getChildren().add(costValue);
        
        return htmlPanelGrid;
    }
    
    public ExpenseDetails ExpenseDetailsBean.getExpenseDetails() {
        if (expenseDetails == null) {
            expenseDetails = new ExpenseDetails();
        }
        return expenseDetails;
    }
    
    public void ExpenseDetailsBean.setExpenseDetails(ExpenseDetails expenseDetails) {
        this.expenseDetails = expenseDetails;
    }
    
    public List<Expense> ExpenseDetailsBean.completeExpense(String query) {
        List<Expense> suggestions = new ArrayList<Expense>();
        for (Expense expense : Expense.findAllExpenses()) {
            String expenseStr = String.valueOf(expense.getXpdate() +  " "  + expense.getItemcode() +  " "  + expense.getRemarks() +  " "  + expense.getTotalCost());
            if (expenseStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(expense);
            }
        }
        return suggestions;
    }
    
    public List<Login> ExpenseDetailsBean.completePaidFor(String query) {
        List<Login> suggestions = new ArrayList<Login>();
        for (Login login : Login.findAllLogins()) {
            String loginStr = login.getUsername();
            if (loginStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(login);
            }
        }
        return suggestions;
    }
    
    public String ExpenseDetailsBean.onEdit() {
        return null;
    }
    
    public boolean ExpenseDetailsBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ExpenseDetailsBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ExpenseDetailsBean.displayList() {
        createDialogVisible = false;
        findAllExpenseDetailses();
        return "expenseDetails";
    }
    
    public String ExpenseDetailsBean.displayCreateDialog() {
        expenseDetails = new ExpenseDetails();
        createDialogVisible = true;
        return "expenseDetails";
    }
    
    public String ExpenseDetailsBean.persist() {
        String message = "";
        if (expenseDetails.getId() != null) {
            expenseDetails.merge();
            message = "message_successfully_updated";
        } else {
            expenseDetails.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "ExpenseDetails");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllExpenseDetailses();
    }
    
    public String ExpenseDetailsBean.delete() {
        expenseDetails.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "ExpenseDetails");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllExpenseDetailses();
    }
    
    public void ExpenseDetailsBean.reset() {
        expenseDetails = null;
        createDialogVisible = false;
    }
    
    public void ExpenseDetailsBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
